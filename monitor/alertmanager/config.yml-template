global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: 'juno.bl.uk:25'
  smtp_from: "alertmanager@${ALERTMANAGER_SERVICE_NAME}"
  smtp_require_tls: false

  # Slack basic config:
  slack_api_url: '${SLACK_WEBHOOK_URL}'

  # Plus proxy so we can get to Slack:
  http_config:
    proxy_url: '${HTTP_PROXY}'


# The directory from which notification templates are read.
templates:
- '/etc/alertmanager/template/*.tmpl'

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['alertname', 'job']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 12h

  # Say when the problem goes away:

  # A default receiver
  receiver: 'wa-sysadm'

  # Additional routes:
  #routes:
  #- receiver: 'slack-notifications'

receivers:
- name: 'wa-sysadm'
  # Send email:
  email_configs:
  - to: "${ALERT_EMAIL}"

  # Also sent Pushover notifications:
  pushover_configs:
  - user_key: '${PUSHOVER_USER_KEY}'
    token: '${PUSHOVER_APP_TOKEN}'
    send_resolved: true
    retry: 1h

# Slack updates (not in use at present):
- name: 'slack-notifications'
  slack_configs:
  - channel: '#alerts'
    send_resolved: true

